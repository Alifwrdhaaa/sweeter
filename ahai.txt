<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Log In | SWEETER</title>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />

    <!-- Bulma CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css"
    />
    <!-- Font Awesome CSS -->
    <link
      href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
      rel="stylesheet"
    />

    <!-- JS -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.js"></script>
    <link
      href="{{ url_for('static', filename='style.css') }}"
      rel="stylesheet"
    />

    <script>
      // {% if msg %}
      //     alert("{{ msg }}")
      // {% endif %}
      function sign_in() {
        let username = $("#input-username").val();
        let password = $("#input-password").val();

        if (username === "") {
          $("#help-id-login").text("Please input your id.");
          $("#input-username").focus();
          return;
        } else {
          $("#help-id-login").text("");
        }

        if (password === "") {
          $("#help-password-login").text("Please input your password.");
          $("#input-password").focus();
          return;
        } else {
          $("#help-password-login").text("");
        }

        console.log(username, password);
        $.ajax({
          type: "POST",
          url: "/sign_in",
          data: {
            username_give: username,
            password_give: password,
          },
          success: function (response) {
            if (response["result"] === "success") {
              $.cookie("mytoken", response["token"], { path: "/" });
              window.location.replace("/");
            } else {
              alert(response["msg"]);
            }
          },
        });
      }

      function toggle_sign_up() {
        $("#sign-up-box").toggleClass("is-hidden");
        $("#div-sign-in-or-up").toggleClass("is-hidden");
        $("#btn-check-dup").toggleClass("is-hidden");
        $("#help-id").toggleClass("is-hidden");
        $("#help-password").toggleClass("is-hidden");
        $("#help-password2").toggleClass("is-hidden");
      }
      function is_nickname(asValue) {
        var regExp = /^(?=.*[a-zA-Z])[-a-zA-Z0-9_.]{2,10}$/;
        return regExp.test(asValue);
      }

      function is_password(asValue) {
        var regExp = /^(?=.*\d)(?=.*[a-zA-Z])[0-9a-zA-Z!@#$%^&*]{8,20}$/;
        return regExp.test(asValue);
      }

      function check_dup() {
        let username = $("#input-username").val();
        console.log(username);
        if (username === "") {
          $("#help-id")
            .text("Enter in your id")
            .removeClass("is-safe")
            .addClass("is-danger");
          $("#input-username").focus();
          return;
        }
        if (!is_nickname(username)) {
          $("#help-id")
            .text(
              "Please check your id. For your id, please enter 2-10 English characters, numbers, or the following special characters (._-)"
            )
            .removeClass("is-safe")
            .addClass("is-danger");
          $("#input-username").focus();
          return;
        }
        $("#help-id").addClass("is-loading");
        $.ajax({
          type: "POST",
          url: "/sign_up/check_dup",
          data: {
            username_give: username,
          },
          success: function (response) {
            console.log(response);
            if (response["exists"]) {
              $("#help-id")
                .text("This id is already in use.")
                .removeClass("is-safe")
                .addClass("is-danger");
              $("#input-username").focus();
            } else {
              $("#help-id")
                .text("This id is available!")
                .removeClass("is-danger")
                .addClass("is-success");
            }
            $("#help-id").removeClass("is-loading");
          },
        });
      }
      function sign_up() {
        let username = $("#input-username").val();
        let password = $("#input-password").val();
        let password2 = $("#input-password2").val();
        console.log(username, password, password2);
        console.log($("#help-id").attr("class"));

        if ($("#help-id").hasClass("is-danger")) {
          alert("Please check your id");
          return;
        } else if (!$("#help-id").hasClass("is-success")) {
          alert("Please double check your id");
          return;
        }

        if (password === "") {
          $("#help-password")
            .text("Please enter your password")
            .removeClass("is-safe")
            .addClass("is-danger");
          $("#input-password").focus();
          return;
        } else if (!is_password(password)) {
          $("#help-password")
            .text(
              "Please check your password. For your password, please enter 8-20 English characters, numbers, or the following special characters (!@#$%^&*)"
            )
            .removeClass("is-safe")
            .addClass("is-danger");
          $("#input-password").focus();
          return;
        } else {
          $("#help-password")
            .text("This password can be used!")
            .removeClass("is-danger")
            .addClass("is-success");
        }
        if (password2 === "") {
          $("#help-password2")
            .text("Please enter your password")
            .removeClass("is-safe")
            .addClass("is-danger");
          $("#input-password2").focus();
          return;
        } else if (password2 !== password) {
          $("#help-password2")
            .text("Your passwords do not match")
            .removeClass("is-safe")
            .addClass("is-danger");
          $("#input-password2").focus();
          return;
        } else {
          $("#help-password2")
            .text("Your passwords match!!!")
            .removeClass("is-danger")
            .addClass("is-success");
        }
        $.ajax({
          type: "POST",
          url: "/sign_up/save",
          data: {
            username_give: username,
            password_give: password,
          },
          success: function (response) {
            alert("Your are signed up! Nice!");
            window.location.replace("/login");
          },
        });
      }

      function clearInputs() {
        $("#input-username").val("");
        $("#input-password").val("");
        $("#input-password2").val("");
      }
    </script>
  </head>
  <body>
    <nav
      class="navbar is-fixed-top is-white"
      role="navigation"
      aria-label="main navigation"
    >
      <div class="navbar-brand">
        <a class="navbar-item" href="/">
            <img src="{{ url_for('static', filename='logo.jpg') }}" alt="Logo">
          <strong
            class="is-sparta logo-text"
            >SWEETER</strong
          >
        </a>
      </div>
    </nav>
    <section class="hero is-white">
      <div
        class="hero-body has-text-centered"
        style="padding-bottom: 1rem; margin: auto"
      >
        <h1 class="title is-sparta">SWEETER</h1>
        <h3 class="subtitle is-sparta">The sweetest site</h3>
      </div>
    </section>

    <section class="section">
      <div class="container">
        <div class="box" style="max-width: 480px; margin: auto">
          <article class="media">
            <div class="media-content">
              <div class="content">
                <div class="field has-addons">
                  <div class="control has-icons-left" style="width: 100%">
                    <input
                      id="input-username"
                      class="input"
                      type="text"
                      placeholder="id"
                    />
                    <span class="icon is-small is-left"
                      ><i class="fa fa-user"></i
                    ></span>
                  </div>
                  <div id="btn-check-dup" class="control is-hidden">
                    <button class="button is-sparta" onclick="check_dup()">
                      Check your id
                    </button>
                  </div>
                </div>
                <p id="help-id" class="help is-hidden">
                  For your id, please enter 2-10 English characters, numbers, or
                  the following special characters (._-)
                </p>
                <p id="help-id-login" class="help is-danger"></p>

                <div class="field">
                  <div class="control has-icons-left">
                    <input
                      id="input-password"
                      class="input"
                      type="password"
                      placeholder="password"
                    />
                    <span class="icon is-small is-left"
                      ><i class="fa fa-lock"></i
                    ></span>
                  </div>
                  <p id="help-password" class="help is-hidden">
                    For your password, please enter 8-20 English characters,
                    numbers, or the following special characters (!@#$%^&*)
                  </p>
                </div>
              </div>
              <div id="div-sign-in-or-up" class="has-text-centered">
                <nav class="level is-mobile">
                  <button
                    class="level-item button is-sparta"
                    onclick="sign_in()"
                  >
                    Sign In
                  </button>
                  <button
                    class="level-item button is-sparta is-outlined"
                    onclick="clearInputs()"
                  >
                    Clear
                  </button>
                </nav>
                <hr />
                <h4 class="mb-3">If you have not yet signed up</h4>
                <nav class="level is-mobile">
                  <button
                    class="level-item button is-sparta is-outlined"
                    onclick="toggle_sign_up()"
                  >
                    Sign Up
                  </button>
                </nav>
              </div>

              <div id="sign-up-box" class="is-hidden">
                <div class="mb-5">
                  <div class="field">
                    <div class="control has-icons-left" style="width: 100%">
                      <input
                        id="input-password2"
                        class="input"
                        type="password"
                        placeholder="Confirm your password"
                      />
                      <span class="icon is-small is-left"
                        ><i class="fa fa-lock"></i
                      ></span>
                    </div>
                    <p id="help-password2" class="help">
                      Please enter in your password again
                    </p>
                  </div>
                </div>
                <nav class="level is-mobile">
                  <button
                    class="level-item button is-sparta"
                    onclick="sign_up()"
                  >
                    Sign Up
                  </button>
                  <button
                    class="level-item button is-sparta is-outlined"
                    onclick="toggle_sign_up()"
                  >
                    Cancel
                  </button>
                  <button
                    class="level-item button is-sparta is-outlined"
                    onclick="clearInputs()"
                  >
                    Clear
                  </button>
                </nav>
              </div>
            </div>
          </article>
        </div>
      </div>
    </section>
  </body>
</html>






import os
from os.path import join, dirname
from dotenv import load_dotenv

from pymongo import MongoClient
import jwt
import datetime
import hashlib
from flask import Flask, render_template, jsonify, request, redirect, url_for
from werkzeug.utils import secure_filename
from datetime import datetime, timedelta


dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)

MONGODB_URI = os.environ.get("MONGODB_URI")
DB_NAME =  os.environ.get("DB_NAME")

client = MongoClient(MONGODB_URI)

db = client[DB_NAME]


app = Flask(__name__)
app.config["TEMPLATES_AUTO_RELOAD"] = True
app.config["UPLOAD_FOLDER"] = "./static/profile_pics"

SECRET_KEY = "SPARTA"

@app.route("/")
def home():
    token_receive = request.cookies.get("mytoken")
    try:
        payload = jwt.decode(token_receive, SECRET_KEY, algorithms=["HS256"])
        user_info = db.users.find_one({"username": payload["id"]})
        return render_template("index.html", user_info=user_info)
    except jwt.ExpiredSignatureError:
        return redirect(url_for("login", msg="Your token has expired"))
    except jwt.exceptions.DecodeError:
        return redirect(url_for("login", msg="There was problem logging you in"))


@app.route("/login")
def login():
    msg = request.args.get("msg")
    return render_template("login.html", msg=msg)


@app.route("/user/<username>")
def user(username):
    # an endpoint for retrieving a user's profile information
    # and all of their posts
    token_receive = request.cookies.get("mytoken")
    try:
        payload = jwt.decode(token_receive, SECRET_KEY, algorithms=["HS256"])
        # if this is my own profile, True
        # if this is somebody else's profile, False
        status = username == payload["id"]

        user_info = db.users.find_one({"username": username}, {"_id": False})
        return render_template("user.html", user_info=user_info, status=status)
    except (jwt.ExpiredSignatureError, jwt.exceptions.DecodeError):
        return redirect(url_for("home"))


@app.route("/sign_in", methods=["POST"])
def sign_in():
    # Sign in
    username_receive = request.form["username_give"]
    password_receive = request.form["password_give"]
    pw_hash = hashlib.sha256(password_receive.encode("utf-8")).hexdigest()
    print(username_receive, pw_hash)
    result = db.users.find_one(
        {
            "username": username_receive,
            "password": pw_hash,
        }
    )
    if result:
        payload = {
            "id": username_receive,
            # the token will be valid for 24 hours
            "exp": datetime.utcnow() + timedelta(seconds=60 * 60 * 24),
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")

        return jsonify(
            {
                "result": "success",
                "token": token,
            }
        )
    # Let's also handle the case where the id and
    # password combination cannot be found
    else:
        return jsonify(
            {
                "result": "fail",
                "msg": "We could not find a user with that id/password combination",
            }
        )


@app.route("/sign_up/save", methods=["POST"])
def sign_up():
    username_receive = request.form["username_give"]
    password_receive = request.form["password_give"]
    password_hash = hashlib.sha256(password_receive.encode("utf-8")).hexdigest()
    doc = {
        "username": username_receive,  # id
        "password": password_hash,  # password
        "profile_name": username_receive,  # user's name is set to their id by default
        "profile_pic": "",  # profile image file name
        "profile_pic_real": "profile_pics/profile_placeholder.png",  # a default profile image
        "profile_info": "",  # a profile description
    }
    db.users.insert_one(doc)
    return jsonify({"result": "success"})


@app.route("/sign_up/check_dup", methods=["POST"])
def check_dup():
    # ID we should check whether or not the id is already taken
    username_receive = request.form["username_give"]
    exists = bool(db.users.find_one({"username": username_receive}))
    return jsonify({"result": "success", "exists": exists})


@app.route("/update_profile", methods=["POST"])
def save_img():
    token_receive = request.cookies.get("mytoken")
    try:
        payload = jwt.decode(token_receive, SECRET_KEY, algorithms=["HS256"])
        username = payload["id"]
        name_receive = request.form["name_give"]
        about_receive = request.form["about_give"]
        new_doc = {"profile_name": name_receive, "profile_info": about_receive}
        if "file_give" in request.files:
            file = request.files["file_give"]
            filename = secure_filename(file.filename)
            extension = filename.split(".")[-1]
            file_path = f"profile_pics/{username}.{extension}"
            file.save("./static/" + file_path)
            new_doc["profile_pic"] = filename
            new_doc["profile_pic_real"] = file_path
        db.users.update_one({"username": payload["id"]}, {"$set": new_doc})
        return jsonify({"result": "success", "msg": "Profile updated!"})
    except (jwt.ExpiredSignatureError, jwt.exceptions.DecodeError):
        return redirect(url_for("home"))


@app.route("/posting", methods=["POST"])
def posting():
    token_receive = request.cookies.get("mytoken")
    try:
        payload = jwt.decode(token_receive, SECRET_KEY, algorithms=["HS256"])
        # We should create a new post here
        user_info = db.users.find_one({"username": payload["id"]})
        comment_receive = request.form["comment_give"]
        date_receive = request.form["date_give"]
        doc = {
            "username": user_info["username"],
            "profile_name": user_info["profile_name"],
            "profile_pic_real": user_info["profile_pic_real"],
            "comment": comment_receive,
            "date": date_receive,
        }
        db.posts.insert_one(doc)
        return jsonify({"result": "success", "msg": "Posting successful!"})
    except (jwt.ExpiredSignatureError, jwt.exceptions.DecodeError):
        return redirect(url_for("home"))


@app.route("/get_posts", methods=["GET"])
def get_posts():
    token_receive = request.cookies.get("mytoken")
    try:
        payload = jwt.decode(token_receive, SECRET_KEY, algorithms=["HS256"])

        username_receive = request.args.get("username_give")
        if username_receive == "":
            posts = list(db.posts.find({}).sort("date", -1).limit(20))
        else:
            posts = list(
                db.posts.find({"username": username_receive}).sort("date", -1).limit(20)
            )

        for post in posts:
            post["_id"] = str(post["_id"])
            post["count_heart"] = db.likes.count_documents(
                {"post_id": post["_id"], "type": "heart"}
            )
            post["_id"] = str(post["_id"])
            post["count_star"] = db.likes.count_documents(
                {"post_id": post["_id"], "type": "star"}
            )
            post["_id"] = str(post["_id"])
            post["count_thumbsup"] = db.likes.count_documents(
                {"post_id": post["_id"], "type": "thumbsup"}
            )
            post["heart_by_me"] = bool(
                db.likes.find_one(
                     {"post_id": post["_id"], "type": "heart", "username": payload["id"]}
                )
            )
            post["star_by_me"] = bool(
                db.likes.find_one(
                    {"post_id": post["_id"], "type": "star", "username": payload["id"]}
                )
            )
            post["thumbsup_by_me"] = bool(
                db.likes.find_one(
                    {"post_id": post["_id"], "type": "thumbsup", "username": payload["id"]}
                )
            )
        return jsonify(
            {
                "result": "success",
                "msg": "Successful fetched all posts",
                "posts": posts,
            }
        )
    except (jwt.ExpiredSignatureError, jwt.exceptions.DecodeError):
        return redirect(url_for("home"))


@app.route("/update_like", methods=["POST"])
def update_like():
    token_receive = request.cookies.get("mytoken")
    try:
        payload = jwt.decode(token_receive, SECRET_KEY, algorithms=["HS256"])
        # We should change the like count for the post here
        user_info = db.users.find_one({"username": payload["id"]})
        post_id_receive = request.form["post_id_give"]
        type_receive = request.form["type_give"]
        action_receive = request.form["action_give"]
        doc = {
            "post_id": post_id_receive,
            "username": user_info["username"],
            "type": type_receive,
        }
        if action_receive == "like":
            db.likes.insert_one(doc)
        else:
            db.likes.delete_one(doc)
        count = db.likes.count_documents(
            {"post_id": post_id_receive, "type": type_receive}
        )
        return jsonify({"result": "success", "msg": "updated", "count": count})
    except (jwt.ExpiredSignatureError, jwt.exceptions.DecodeError):
        return redirect(url_for("home"))


@app.route("/about")
def about():
    return render_template("about.html")


@app.route("/secret")
def secret():
    token_receive = request.cookies.get("mytoken")
    try:
        payload = jwt.decode(token_receive, SECRET_KEY, algorithms=["HS256"])
        return render_template("secret.html")
    except (jwt.ExpiredSignatureError, jwt.exceptions.DecodeError):
        return redirect(url_for("home"))


if __name__ == "__main__":
    app.run("0.0.0.0", port=5000, debug=True)